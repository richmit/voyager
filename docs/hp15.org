# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        readme.org
#+TITLE:       HP Voyager Programs
#+SUBTITLE:    For HP-15C
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2024-02-03
#+DESCRIPTION: Various programs for HP Voyager series calculators
#+KEYWORDS:    Hewlett Packard RPN RPL
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
# Change max-width to get wider output -- also note #content style below
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_HEAD: <style>blockquote { margin-bottom: 0.5em; padding: 0.5em; background-color: #FFF8DC; border-left: 2px solid #A5573E; border-left-color: rgb(255, 228, 102); display: block; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 5em; margin-inline-end: 5em; } </style>
# Change the following to get wider output -- also note body style above
#+HTML_HEAD: <style>#content { max-width: 60em; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://richmit.github.io/voyager/
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|          <r> | <l>                                 |
|    *Author:* | /{{{author}}}/                      |
|   *Updated:* | /{{{modification-time(%Y-%m-%d)}}}/ |
| *Generated:* | /{{{time(%Y-%m-%d)}}}/              |
#+ATTR_HTML: :align center
Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved.


* Introduction
:PROPERTIES:
:CUSTOM_ID: intro
:END:

The HP-15C was designed over 40 years ago.  By modern standards it is missing many features found in scientific calculators today; however, the HP-15C is far
more efficient than modern machines.  
#+BEGIN_QUOTE
 - Fewer keystrokes ::
   Calculations that require half a dozen keystrokes on the HP-15C might take a couple dozen keystrokes on a modern
   calculator.  
 - All functionality directly available from the keyboard ::
   Not only do modern machines require more keystrokes, but many of those keystrokes are for navigating through menus.  On the HP-15C everything is no more
   than a couple keystrokes away.
 - Great keyboard ::
   The layout is designed for speed.  Mechanically it doesn't bounce or cause double entries.  It has tactical feedback to confirm key activation.  These
   features mean long time HP-15C users can stay focused on the problem at hand while touch typing problems into the machine.
#+END_QUOTE

It is the HP-15C's ability to very quickly hammer out simple calculations that keeps it on my desk.  Most scientific calculations beyond the HP-15C's
capabilities tend to be ones I would normally tackle with my laptop instead of using a more sophisticated calculator.  That said, I do occasionally us a Casio
Classpad II, DM-42, Casio cg50, or HP-48GX.

Most of the programs found here are all about efficiency: 
  - Efficient replacements for STO/RCL with complex numbers
  - Reducing the tedium of matrix computations.
Only one is about new functionality:
  - Newton's method for functions of a complex variable


#+TOC: headlines 5

#+INCLUDE: emacs.org

* Store & Recall Complex Numbers
:PROPERTIES:
:CUSTOM_ID: storclcplx
:END:

The official user guide has a pair of example programs capable of storing and recalling complex values using a matrix for storage.  The programs here are
similar except that they use registrars for storage -- storing the real and complex parts in consecutive storage registers.

With respect to the stack, these programs attempt to behave like the built in =STO= & =RCL= functions:
 - They both preserve the stack contents
 - The =STO CLPX= program leaves the item to be stored in the X stack position

If the calculator is not already in complex mode, then it will be placed in complex mode by the program.

** Usage
:PROPERTIES:
:CUSTOM_ID: storclcplxUsage
:END:

- Inputs:
 - =STO CPLX=: The number to store is on stack level Y, and the first register index is on stack level X.  \\
               The real part of Y is stored at the register indicated by the index in X, and the complex part of Y is stored in the next consecutive register.
 - =RCL CPLX=: The first register index is on stack level X.
- The result stack:
 - =STO CPLX=: The stack is shifted down so the register index is in stack position T.
 - =RCL CPLX=: The register index in stack position X is replaced by the recalled complex number, and the other stack levels are left unchanged.
- Error Conditions
 - Given register is out of bounds: An =Error 3= will be produced & the stack contents will be invalidated.
 - Given register plus one is out of bounds: An =Error 3= will be produced, the stack contents will be invalidated, and the value in the given register will be invalidated.

** Stack Diagrams
:PROPERTIES:
:CUSTOM_ID: storclcplxStk
:END:

#+BEGIN_CENTER
*=STO_CPLX=* -- Store Complex Number
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 3em
| <c>  | <l>         | <l>         |
|      | *Before*    | *After*     |
| *T:* | t           | Reg Index   |
| *Z:* | z           | t           |
| *Y:* | Cplx Number | z           |
| *X:* | Reg Index   | Cplx Number |

#+BEGIN_CENTER
*=RCL_CPLX=* -- Recall Complex Number
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 3em
| <c>  | <l>       | <l>         |
|      | *Before*  | *After*     |
| *T:* | t         | t           |
| *Z:* | z         | z           |
| *Y:* | y         | y           |
| *X:* | Reg Index | Cplx Number |

** Resources Used
:PROPERTIES:
:CUSTOM_ID: storclcplxRes
:END:

- Internal Labels:
  - E RCL_CPLX
  - D STO_CPLX
- External Labels:
  - None
- Registers Used:
  - Two consecutive registers are used.
  - The first has its index on level X of the stack
- Matrices:
  - None


** Program Listing
:PROPERTIES:
:CUSTOM_ID: storclcplxCode
:END:

#+BEGIN_CENTER
=STO_CPLX= -- Store Complex Number
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 1em
| <l>                    |         <r> |    <c>    |              <r> |    <c>    | <l>        |
| *Keystrokes* {{{SPC}}} | *Key Codes* | {{{SPC}}} | *Stack Contents* | {{{SPC}}} | *Comments* |
| {{{c15(  f LBL D )}}}  |  =42,21,14= |           |          x y z t |           |            |
| {{{c15(  STO I   )}}}  |     =44 25= |           |          x y z t |           |            |
| {{{c15(  R↓      )}}}  |        =33= |           |          y z t x |           |            |
| {{{c15(  STO (i) )}}}  |     =44 24= |           |          y z t x |           |            |
| {{{c15(  f ISG I )}}}  |  =42, 6,25= |           |          y z t x |           |            |
| {{{c15(  g CLx   )}}}  |     =43 35= |           |          y z t x |           | NOP        |
| {{{c15(  f Re≷Im )}}}  |     =42 30= |           |         ~y z t x |           |            |
| {{{c15(  STO (i) )}}}  |     =44 24= |           |         ~y z t x |           |            |
| {{{c15(  f Re≷Im )}}}  |     =42 30= |           |          y z t x |           | Ret        |
| {{{c15(  g RTN   )}}}  |     =43 32= |           |                  |           |            |
#+BEGIN_CENTER
=RCL_CPLX= -- Recall Complex Number
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 1em
| <l>                    |         <r> |    <c>    |              <r> |    <c>    | <l>           |
| *Keystrokes* {{{SPC}}} | *Key Codes* | {{{SPC}}} | *Stack Contents* | {{{SPC}}} | *Comments*    |
| {{{c15(  f LBL E )}}}  |  =42,21,15= |           |          x y z t |           |               |
| {{{c15(  STO I   )}}}  |     =44 25= |           |          x y z t |           |               |
| {{{c15(  R↓      )}}}  |        =33= |           |          y z t x |           |               |
| {{{c15(  RCL (i) )}}}  |     =45 24= |           |         Cr y z t |           |               |
| {{{c15(  f ISG I )}}}  |   =42,6,25= |           |         Cr y z t |           |               |
| {{{c15(  g CLx   )}}}  |     =43 35= |           |         Cr y z t |           | NOP           |
| {{{c15(  f Re≷Im )}}}  |     =42 30= |           |        ~Cr y z t |           |               |
| {{{c15(  g CLx   )}}}  |     =43 35= |           |        ~Cr y z t |           | Disable stack |
| {{{c15(  RCL (i) )}}}  |     =45 24= |           |         ~C y z t |           |               |
| {{{c15(  f Re≷Im )}}}  |     =42 30= |           |          C y z t |           | Ret           |
| {{{c15(  g RTN   )}}}  |     =43 32= |           |                  |           |               |

* Newton's Method for Functions of a Complex Variable
:PROPERTIES:
:CUSTOM_ID: newton
:END:

Attempts to find a root of a function of a complex variable using Newtons method.  Newton's method is iterative taking an initial guess, and generating
successive guesses that, if we are fortunate, converge to a root.  In what follows, the function is referred to as $f(x)$ and the initial guess is referred to as
$x_0$.  The final guess is referred to as $x_1$.

If the calculator is not already in complex mode, then it will be placed in complex mode by the program.

** Usage

- Running the program
  - Stack Arguments:
    - X best guess for root ($x_0$)
  - Function to solve:
    - Must be =LBL 1=
    - When called, $x$ will be on every level of the stack
    - Returns $f(x)$ to stack level Y and $f'(x)$ to stack level X.
- Exit Information
  - Exit Stack State:
    - Z: $f(x_1)$   Function value at $x_1$
    - Y: $|f(x_1)|$ Function magnitude at $x_1$
    - X: $x_1$      Root guess
  - Exit Register State:
    - R8 $\Re(x_1)$
    - R9 $\Im(x_1)$
  - Non-normal Exits:
   - *Program might not converge:*  In this case it will run forever.  If the program is interrupted it is highly likely, but not guaranteed, the last guess will
     be stored in registers 8 & 9.
   - *Evaluation error:* If the function causes an error during evaluation, the program will stop.  The last guess will be stored in R8 & R9.
   - *Zero Derivative:* If the derivative is zero, then an "Error 0" will occur.   The last guess will be stored in R8 & R9.

** Resources Used
:PROPERTIES:
:CUSTOM_ID: newtonRes
:END:

- Internal Labels:
  - D Program label
  - .1 Main loop target
- External Labels:
  - 1 function to solve
  - E RCL_CPLX
  - D STO_CPLX
- Registers Used:
  - R8 Real component of root guess
  - R9 Complex component of root guess
- Matrices:
  - None


** Program Listing
:PROPERTIES:
:CUSTOM_ID: newtonCode
:END:

#+BEGIN_CENTER
=NEWTON= -- Newton's Method for a Function of a Complex Variable
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 1em
| <l>                    |         <r> |    <c>    |              <r> |    <c>    | <l>                 |
| *Keystrokes* {{{SPC}}} | *Key Codes* | {{{SPC}}} | *Stack Contents* | {{{SPC}}} | *Comments*          |
| {{{c15(  f LBL C  )}}} |  =42,21,13= |           |         x0 ? ? ? |           |                     |
| {{{c15(  8        )}}} |         =8= |           |         8 x0 ? ? |           |                     |
| {{{c15(  GSB D    )}}} |     =32 14= |           |         x0 ? ? 8 |           | STO_CPLX            |
| {{{c15(  f LBL .1 )}}} |  =42,21,.1= |           |          ? ? ? ? |           |                     |
| {{{c15(  8        )}}} |         =8= |           |          8 ? ? ? |           |                     |
| {{{c15(  GSB E    )}}} |     =32 15= |           |         x0 ? ? ? |           | RCL_CPLX            |
| {{{c15(  ENTER    )}}} |        =36= |           |        x0 x0 ? ? |           | x0=Previous iterate |
| {{{c15(  ENTER    )}}} |        =36= |           |       x0 x0 x0 ? |           |                     |
| {{{c15(  ENTER    )}}} |        =36= |           |      x0 x0 x0 x0 |           |                     |
| {{{c15(  GSB 1    )}}} |     =32  1= |           |         df f ? ? |           | Function to solve   |
| {{{c15(  x≷y      )}}} |        =34= |           |         f df ? ? |           | f=f(x0), df=f'(x0)  |
| {{{c15(  ENTER    )}}} |        =36= |           |         f f df ? |           |                     |
| {{{c15(  ENTER    )}}} |        =36= |           |         f f f df |           |                     |
| {{{c15(  8        )}}} |         =8= |           |         8 f f df |           |                     |
| {{{c15(  GSB E    )}}} |     =32 15= |           |        x0 f f df |           | RCL_CPLX            |
| {{{c15(  g R↑     )}}} |     =43 33= |           |        df x0 f f |           |                     |
| {{{c15(  g R↑     )}}} |     =43 33= |           |        f df x0 f |           |                     |
| {{{c15(  x≷y      )}}} |        =34= |           |        df f x0 f |           |                     |
| {{{c15(  ÷        )}}} |        =10= |           |      f÷df x0 f f |           |                     |
| {{{c15(  x≷y      )}}} |        =34= |           |      x0 f÷df f f |           |                     |
| {{{c15(  ENTER    )}}} |        =36= |           |     x0 x0 f÷df f |           |                     |
| {{{c15(  R↓       )}}} |        =33= |           |     x0 f÷df f x0 |           |                     |
| {{{c15(  x≷y      )}}} |        =34= |           |     f÷df x0 f x0 |           |                     |
| {{{c15(  -        )}}} |        =30= |           |       x1 f x0 x0 |           | x1=Current iterate  |
| {{{c15(  8        )}}} |         =8= |           |        8 x1 f x0 |           |                     |
| {{{c15(  GSB D    )}}} |     =32 14= |           |        x1 f x0 8 |           | STO_CPLX            |
| {{{c15(  x≷y      )}}} |        =34= |           |        f x1 x0 8 |           |                     |
| {{{c15(  ENTER    )}}} |        =36= |           |       f f  x1 x0 |           |                     |
| {{{c15(  g ABS    )}}} |     =43 16= |           |       fM f x1 x0 |           | fM=abs(f(x1))       |
| {{{c15(  1        )}}} |         =1= |           |        1 fM f x1 |           |                     |
| {{{c15(  EEX      )}}} |        =26= |           |        1 fM f x1 |           |                     |
| {{{c15(  7        )}}} |         =7= |           |      1e7 fM f x1 |           |                     |
| {{{c15(  CHS      )}}} |        =16= |           |        e fM f x1 |           | e=Epsilon           |
| {{{c15(  g TEST 8 )}}} |  =43,30, 8= |           |        e fM f x1 |           | y>x?                |
| {{{c15(  GTO .1   )}}} |     =22 .1= |           |        e fM f x1 |           |                     |
| {{{c15(  g R↑     )}}} |     =43 33= |           |        x1 e fM f |           |                     |
| {{{c15(  x≷y      )}}} |        =34= |           |        e x1 fM f |           |                     |
| {{{c15(  R↓       )}}} |        =33= |           |        x1 fM f e |           |                     |
| {{{c15(  g RTN    )}}} |     =43 32= |           |        x1 fM f e |           |                     |

* Matrix Helpers
:PROPERTIES:
:CUSTOM_ID: mat
:END:

These programs don't do anything the HP-15C can't already do.  They serve two purposes: 1) Reduce the number of keystrokes required, and 2) Free the user from
remembering the strange incantations required to work with complex matrices.

** Fill a Matrix
:PROPERTIES:
:CUSTOM_ID: matFill
:END:

*** Usage
:PROPERTIES:
:CUSTOM_ID: matFillUsage
:END:

This program provides a fast way to fill a matrix.

Filling a matrix on the HP-15C takes roughly $13+2\cdot n\cdot m$ keystrokes beyond data entry where $m$ is the number of rows and $n$ is the number of
columns.  This program reduces that to $5+n\cdot m$.  Saving us 12 keystrokes for a 2x2, 17 for a 3x3, and 24 for a 4x4 -- all representing a more than 50%
reduction in effort.  This program also puts the descriptor of the matrix filled on the stack -- potentially saving 3 more keystrokes.

 - Operation
   - Run the program with the following inputs: A matrix descriptor or number 0 (stack level Z), number of rows (stack level Y), and number of columns (stack level X).
     If Z is the number 0, then the {{{c15(A)}}} matrix is filled.
   - Next the number 1.1 will appear on the display -- indicating it's time to enter the value matrix element $(1,1)$.
   - Enter the value for the matrix position and press {{{c15(R/S)}}}.
   - Repeat until all the matrix elements have been entered.

*** Resources Used
:PROPERTIES:
:CUSTOM_ID: matFillRes
:END:

- Internal Labels:
  - 7 Program label
  - .7 Main loop target
- External Labels:
  - None
- Registers Used:
  - R0 Matrix indexing
  - R1 Matrix indexing
  - I  Matrix descripter
- Matrices:
  - None

*** Program Listing
:PROPERTIES:
:CUSTOM_ID: matFillCode
:END:

#+BEGIN_CENTER
=FILL_MAT= -- Fill a Matrix
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 1em
| <l>                         |         <r> |    <c>    |              <r> |    <c>    | <l>                              |
| *Keystrokes* {{{SPC}}}      | *Key Codes* | {{{SPC}}} | *Stack Contents* | {{{SPC}}} | *Comments*                       |
| {{{c15( f LBL 7        )}}} |  =42,21, 7= |           |     n m MATor0 t |           |                                  |
| {{{c15( RCL MATRIX A   )}}} |  =45,16,11= |           |     A n m MATor0 |           |                                  |
| {{{c15( STO I          )}}} |     =44 25= |           |     A n m MATor0 |           |                                  |
| {{{c15( g R↑           )}}} |     =43 33= |           |     MATor0 A n m |           |                                  |
| {{{c15( g TEST 0       )}}} |  =43,30, 0= |           |     MATor0 A n m |           |                                  |
| {{{c15( STO I          )}}} |     =44 25= |           |          A A n m |           | Sto given matrix descriptor in I |
| {{{c15( R↓             )}}} |        =33= |           |     A n m MATor0 |           |                                  |
| {{{c15( R↓             )}}} |        =33= |           |     n m MATor0 A |           |                                  |
| {{{c15( f DIM I        )}}} |  =42,23,25= |           |     n m MATor0 A |           | Dim given matrix                 |
| {{{c15( f MATRIX 1     )}}} |  =42,16, 1= |           |     n m MATor0 A |           | Set R0 & R1 to 1                 |
| {{{c15( LBL .7         )}}} |  =42,21,.7= |           |          ? ? ? ? |           |                                  |
| {{{c15( RCL 0          )}}} |     =45  0= |           |         i  ? ? ? |           |                                  |
| {{{c15( RCL 1          )}}} |     =45  1= |           |          j i ? ? |           |                                  |
| {{{c15( 1              )}}} |         =1= |           |          1 j i ? |           |                                  |
| {{{c15( 0              )}}} |         =0= |           |         10 j i ? |           |                                  |
| {{{c15( ÷              )}}} |        =10= |           |       j/10 i ? ? |           |                                  |
| {{{c15( +              )}}} |        =40= |           |     j/10+i ? ? ? |           |                                  |
| {{{c15( R/S            )}}} |        =31= |           |     j/10+i ? ? ? |           |                                  |
| {{{c15( f USER STO (i) )}}} | =u   44 24= |           |     j/10+i ? ? ? |           |                                  |
| {{{c15( f USER         )}}} |           - |           |     j/10+i ? ? ? |           | Exit USER mode                   |
| {{{c15( GTO .7         )}}} |     =22 .7= |           |     j/10+i ? ? ? |           |                                  |
| {{{c15( RCL I          )}}} |     =45 25= |           |     A j/10+i ? ? |           | Recall filled matrix to stack    |
| {{{c15( g RTN          )}}} |     =43 32= |           |     A j/10+i ? ? |           |                                  |

** Dump a Matrix
:PROPERTIES:
:CUSTOM_ID: matDump
:END:

*** Usage
:PROPERTIES:
:CUSTOM_ID: matDumpUsage
:END:

This program provides a fast way print matrix contents.

 - Operation
   - Run the program with the matrix descriptor or the number 0 in stack level X.  If X is zero, then the {{{c15(RESULT)}}} matrix will be used.
   - Press {{{c15(R/S)}}} untill all you have seen the elements you need
     - Note the program will wrap around to the first element after the last one is displayed -- this is a feature.

*** Resources Used
:PROPERTIES:
:CUSTOM_ID: matDumpRes
:END:

- Internal Labels:
  - 4 Program label
  - .4 Main loop target
- External Labels:
  - None
- Flags:
  - 9 -- CF used as NOP
- Registers Used:
  - R0 Matrix indexing
  - R1 Matrix indexing
  - I  Matrix descripter
- Matrices:
  - None

*** Program Listing
:PROPERTIES:
:CUSTOM_ID: matFillCode
:END:

#+BEGIN_CENTER
=DUMP_MAT= -- Dump a Matrix
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 1em
| <l>                         |         <r> |    <c>    |               <r> |    <c>    | <l>              |
| *Keystrokes* {{{SPC}}}      | *Key Codes* | {{{SPC}}} |  *Stack Contents* | {{{SPC}}} | *Comments*       |
| {{{c15( f LBL 4        )}}} |  =42,21, 4= |           |      MATor0 y z t |           |                  |
| {{{c15( RCL RESULT     )}}} |     =45 26= |           | RESULT MATor0 y z |           |                  |
| {{{c15( STO I          )}}} |     =44 25= |           | RESULT MATor0 y z |           |                  |
| {{{c15( R↓             )}}} |        =33= |           | MATor0 y z RESULT |           |                  |
| {{{c15( g TEST 0       )}}} |  =43,30, 0= |           | MATor0 y z RESULT |           |                  |
| {{{c15( STO I          )}}} |     =44 25= |           | MATor0 y z RESULT |           |                  |
| {{{c15( f MATRIX 1     )}}} |  =42,16, 1= |           | MATor0 y z RESULT |           | Set R0 & R1 to 1 |
| {{{c15( LBL .4         )}}} |  =42,21,.4= |           |           ? ? ? ? |           |                  |
| {{{c15( f USER RCL (i) )}}} | =u   45 24= |           |      M(i,j) ? ? ? |           |                  |
| {{{c15( f USER         )}}} |           - |           |      M(i,j) ? ? ? |           | Exit USER mode   |
| {{{c15( g CF 9         )}}} |  =43, 5, 0= |           |      M(i,j) ? ? ? |           | NOP              |
| {{{c15( R/S            )}}} |        =31= |           |      M(i,j) ? ? ? |           |                  |
| {{{c15( GTO .4         )}}} |     =22 .4= |           |      M(i,j) ? ? ? |           |                  |
| {{{c15( g RTN          )}}} |     =43 32= |           |               N/A |           | Never Get Here   |

** Solve Linear System
:PROPERTIES:
:CUSTOM_ID: matSlv
:END:

*** Usage
:PROPERTIES:
:CUSTOM_ID: matSlvUsage
:END:

This program solves the system $AX=B$ for $X$.  

- Program start conditions
  - The $A$ matrix is assumed to be in {{{c15(A)}}}.  
    - It may be an $n\times n$ real matrix, or an  $n\times 2n$ complex matrix in =C= format.
    - The program determines real vs. complex from the matrix size.
  - The $B$ matrix in {{{c15(B)}}}.  
  - Flag 1 is set appropriately:
    - Clear: Use more memory, but preserve contents of {{{c15(A)}}}.
    - Set: Use less memory, but destroy contents of {{{c15(A)}}}.
- Program end conditions
  - The system "solution", $X$, will be in {{{c15(C)}}}.  Note this might not be a valid solution if $A$ is singular!
  - {{{c15(B)}}} is left unchanged!
  - The matrix descriptor for {{{c15(C)}}} will be in stack position Y.
  - Matrix {{{c15(C)}}} will be selected as the {{{c15(RESULT)}}} matrix.
  - Both =R0= & =R1= will contain 1 in expectation {{{c15(USER)}}} mode will be used to visit the elements of {{{c15(C)}}}.
  - If $A$ is a real matrix:
    - Flag 0 will be clear
    - $\vert A\vert$ is in stack position X
    - The LU factorization of $A$ is in {{{c15(E)}}} when flag 1 is clear, and in {{{c15(A)}}} otherwise
  - If $A$ is a complex matrix
    - Flag 0 will be set
    - $\mathrm{abs}(\vert A\vert)$ is in stack position X
    - The LU factorization of $\tilde{A}$ is in {{{c15(E)}}} when flag 1 is clear, and in {{{c15(A)}}} otherwise

*** Resources Used
:PROPERTIES:
:CUSTOM_ID: matSlvRes
:END:

- Internal Labels:
  - 8 Program label
- External Labels:
  - 9 Subroutine to compute determinant
- Flags:
  - 0 -- Status flag
  - 1 -- Option flag
- Registers:
  - None
- Matrices:
  - A
  - B
  - C
  - E -- only when flag 1 is clear

*** Program Listing
:PROPERTIES:
:CUSTOM_ID: matSlvCode
:END:

#+BEGIN_CENTER
=LIN_SLV= -- Solve $AX=B$
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 1em
| <l>                       |         <r> |    <c>    |                               <r> |    <c>    | <l>        |
| *Keystrokes* {{{SPC}}}    | *Key Codes* | {{{SPC}}} |                  *Stack Contents* | {{{SPC}}} | *Comments* |
| {{{c15( f LBL 8      )}}} |  =42,21, 8= |           |                           x y z t |           |            |
| {{{c15( GSB 9        )}}} |     =32  9= |           |         DET(A)orABS(DET(A)) ? ? ? |           |            |
| {{{c15( RCL MATRIX B )}}} |  =45,16,12= |           |     BorBc DET(A)orABS(DET(A)) ? ? |           |            |
| {{{c15( g F? 0       )}}} |  =43, 6, 0= |           |     BorBc DET(A)orABS(DET(A)) ? ? |           |            |
| {{{c15( f Py\,x      )}}} |     =42 40= |           |     BorBp DET(A)orABS(DET(A)) ? ? |           |            |
| {{{c15( RCL RESULT   )}}} |     =45 26= |           |   LU~ BorBp DET(A)orABS(DET(A)) ? |           |            |
| {{{c15( f RESULT C   )}}} |  =42,26,13= |           |   LU~ BorBp DET(A)orABS(DET(A)) ? |           |            |
| {{{c15( ÷            )}}} |        =10= |           |     CorCp DET(A)orABS(DET(A)) ? ? |           |            |
| {{{c15( g F? 0       )}}} |  =43, 6, 0= |           |     CorCp DET(A)orABS(DET(A)) ? ? |           |            |
| {{{c15( g Cy\,x      )}}} |     =43 40= |           |     CorCc DET(A)orABS(DET(A)) ? ? |           |            |
| {{{c15( x≷y          )}}} |        =34= |           |     DET(A)orABS(DET(A)) CorCc ? ? |           |            |
| {{{c15( f MATRIX 1   )}}} |  =42,16, 1= |           |     DET(A)orABS(DET(A)) CorCc ? ? |           |            |
| {{{c15( RCL MATRIX B )}}} |  =45,16,12= |           | BorBp DET(A)orABS(DET(A)) CorCc ? |           |            |
| {{{c15( g F? 0       )}}} |  =43, 6, 0= |           | BorBp DET(A)orABS(DET(A)) CorCc ? |           |            |
| {{{c15( g Cy\,x      )}}} |     =43 40= |           | BorBc DET(A)orABS(DET(A)) CorCc ? |           |            |
| {{{c15( R↓           )}}} |        =33= |           | DET(A)orABS(DET(A)) CorCc ? BorBc |           |            |
| {{{c15( g RTN        )}}} |     =43 32= |           | DET(A)orABS(DET(A)) CorCc ? BorBc |           |            |

** Matrix Determinants
:PROPERTIES:
:CUSTOM_ID: matDet
:END:

*** Usage
:PROPERTIES:
:CUSTOM_ID: matDetUsage
:END:

- Program start conditions
  - The $A$ matrix is assumed to be in {{{c15(A)}}}.  
    - It may be an $n\times n$ real matrix, or an  $n\times 2n$ complex matrix in =C= format.
    - The program determines real vs. complex from the matrix size.
  - flag 1 is set appropriately:
    - Clear: Use more memory, but preserve contents of {{{c15(A)}}}.
    - Set: Use less memory, but destroy contents of {{{c15(A)}}}.
- Program end conditions
  - The previous contents of the stack are lost
  - If flag 1 is clear
    - {{{c15(A)}}} is left unchanged!
    - {{{c15(RESULT)}}} matrix set as {{{c15(E)}}}
  - If flag 1 is set
    - {{{c15(RESULT)}}} matrix set as {{{c15(A)}}}
  - $A$ is a real matrix
    - Flag 0 will be clear
    - The $\vert A\vert$ is in stack position X
    - The LU factorization of $A$ is in {{{c15(E)}}} when flag 1 is clear, and in {{{c15(A)}}} otherwise
  - If $A$ is a complex matrix
    - Flag 0 will be set
    - $\mathrm{abs}(\vert A\vert)$ is in stack position X
    - The LU factorization of $\tilde{A}$ is in {{{c15(E)}}} when flag 1 is clear, and in {{{c15(A)}}} otherwise

*** Resources Used
:PROPERTIES:
:CUSTOM_ID: matDetRes
:END:

- Internal Labels:
  - 9 -- Program label
  - .9 -- Conditional label
- External Labels:
  - N/A
- Flags:
  - 0 -- exit flag
  - 1 -- option flag
- Registers:
  - N/A
- Matrices:
  - A
  - E -- only when flag 1 is clear

*** Program Listing
:PROPERTIES:
:CUSTOM_ID: matDetCode
:END:

#+BEGIN_CENTER
=DET_A= -- Determinant of A
#+END_CENTER
#+ATTR_HTML: :align center :cellpadding 1em
| <l>                       |         <r> |    <c>    |                   <r> |    <c>    | <l>                            |
| *Keystrokes* {{{SPC}}}    | *Key Codes* | {{{SPC}}} |      *Stack Contents* | {{{SPC}}} | *Comments*                     |
| {{{c15( f LBL 9      )}}} |  =42,21, 9= |           |               x y z t |           |                                |
| {{{c15( f RESULT E   )}}} |  =42,26,15= |           |               x y z t |           |                                |
| {{{c15( F? 1         )}}} |  =43, 6, 1= |           |               x y z t |           |                                |
| {{{c15( f RESULT A   )}}} |  =42,26,11= |           |               x y z t |           |                                |
| {{{c15( RCL DIM A    )}}} |  =45,23,11= |           |               n m x y |           |                                |
| {{{c15( g TEST 5     )}}} |  =43,30, 5= |           |               n m x y |           |                                |
| {{{c15( GTO .9       )}}} |     =22 .9= |           |               n m x y |           |                                |
| {{{c15( g SF 0       )}}} |  =43, 4, 0=  |           |               n m x y |           |                                |
| {{{c15( RCL MATRIX A )}}} |  =45,16,11= |           |               A n m x |           |                                |
| {{{c15( f Py\,x      )}}} |     =42 40= |           |              Ap n m x |           |                                |
| {{{c15( f MATRIX 2   )}}} |  =42,16, 2= |           |              A~ n m x |           |                                |
| {{{c15( f MATRIX 9   )}}} |  =42,16, 9= |           | SQ(ABS(DET(A))) n m x |           |                                |
| {{{c15( g ABS        )}}} |     =43 16= |           | SQ(ABS(DET(A))) n m x |           | If roundoff made it negative   |
| {{{c15( √x           )}}} |        =11= |           |     ABS(DET(A)) n m x |           |                                |
| {{{c15( F? 1         )}}} |  =43, 6, 1= |           |     ABS(DET(A)) n m x |           |                                |
| {{{c15( g RTN        )}}} |     =43 32= |           |     ABS(DET(A)) n m x |           | Rtn when A cplx & flag 1 set   |
| {{{c15( RCL MATRIX A )}}} |  =45,16,11= |           |    A~ ABS(DET(A)) n m |           | Restore A to Ac form           |
| {{{c15( f MATRIX 3   )}}} |  =42,16, 3= |           |    Ap ABS(DET(A)) n m |           |                                |
| {{{c15( g Cy\,x      )}}} |     =43 40= |           |    Ac ABS(DET(A)) n m |           |                                |
| {{{c15( R↓           )}}} |        =33= |           |    ABS(DET(A)) x y Ac |           |                                |
| {{{c15( g RTN        )}}} |     =43 32= |           |    ABS(DET(A)) Cc x x |           | Rtn when A cplx & flag 1 clear |
| {{{c15( LBL .9       )}}} |  =42,29,.9= |           |               n m x y |           |                                |
| {{{c15( g CF 0       )}}} |  =43, 5, 0= |           |               n m x y |           |                                |
| {{{c15( RCL MATRIX A )}}} |  =45,16,11= |           |               A n m x |           |                                |
| {{{c15( f MATRIX 9   )}}} |  =42,16, 9= |           |          DET(A) n m x |           |                                |
| {{{c15( g RTN        )}}} |     =43 32= |           |          DET(A) n m x |           | Rtn when A real                |




* Summary Resource Use
** Labels
#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|      <c>       | <l>                                    |                                                        |      <c>       | <l>                      |
| {{{c15(LBL)}}} | Use                                    |                                                        | {{{c15(LBL)}}} | Use                      |
|----------------+----------------------------------------+--------------------------------------------------------+----------------+--------------------------|
|      =0=       | Unspecified                            |                                                        |      =.0=      | Unspecified              |
|      =1=       | Solver/Integrator/[[#newton][Newton]]  | {{{SPC}}}{{{SPC}}}{{{SPC}}}{{{SPC}}}{{{SPC}}}{{{SPC}}} |      =.1=      | Used in {{{c15(LBL C)}}} |
|      =2=       | Solver/Integrator                      |                                                        |      =.2=      | Unused                   |
|      =3=       | Solver/Integrator                      |                                                        |      =.3=      | Unused                   |
|      =4=       | Unused                                 |                                                        |      =.4=      | Unused                   |
|      =5=       | Unused                                 |                                                        |      =.5=      | Unused                   |
|      =6=       | Unused                                 |                                                        |      =.6=      | Unused                   |
|      =7=       | [[#matFill][Fill A Matrix]]            |                                                        |      =.7=      | Used in {{{c15(LBL 7)}}} |
|      =8=       | [[#matSlv][Solve Real  Linear System]] |                                                        |      =.8=      | Unused                   |
|      =9=       | [[#matDet][Real Determinant]]          |                                                        |      =.9=      | Used in {{{c15(LBL 9)}}} |
|----------------+----------------------------------------+--------------------------------------------------------+----------------+--------------------------|
|      =A=       | Unused                                 |                                                        |                |                          |
|      =B=       | Unused                                 |                                                        |                |                          |
|      =C=       | [[#newton][Complex Newton's Method]]   |                                                        |                |                          |
|      =D=       | [[#storclcplx][Store Complex Number]]  |                                                        |                |                          |
|      =E=       | [[#storclcplx][Recall Complex Number]] |                                                        |                |                          |

** Registers
#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|     <c>     | <l>                            | <l>                                     |
|  Registers  | Use In Programs                | Interactive Use                         |
|-------------+--------------------------------+-----------------------------------------|
|  =0= - =1=  | Always for matrix indexes      | Whatever, but usually as matrix indexes |
|  =2= - =7=  | Always for statistics          | Whatever, but usually for statistics    |
|  =8= - =9=  | User visible program registers | Whatever, but usually for programs      |
| =.0= - =.6= | Whatever                       | Whatever                                |
| =.7= - =.9= | Unit conversion factors        | Unit conversion factors                 |

** Matrix Registers
#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|        <c>        | <l>                                       |
| {{{c15(MATRIX)}}} | Use                                       |
|-------------------+-------------------------------------------|
|        =A=        | Norms, LHS of matrix equations & products |
|        =B=        | RHS of matrix equations & products        |
|        =C=        | Unspecified                               |
|        =D=        | Result for matrix equations               |
|        =E=        | Result for norms & products               |

* Meta Data

The primary URL for this page: https://richmit.github.io/voyager/hp15.html

The org mode file for this page: https://github.com/richmit/voyager/blob/main/docs/hp15.org

The HTML file for this page: https://github.com/richmit/voyager/blob/main/docs/hp15.html

The github repository housing this content: https://github.com/richmit/voyager/




