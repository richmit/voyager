# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        readme.org
#+TITLE:       HP-15C Tips & Tricks
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2024-02-03
#+DESCRIPTION: Various tips and tricks for the HP-15C
#+KEYWORDS:    Hewlett Packard RPN RPL
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
# Change max-width to get wider output -- also note #content style below
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_HEAD: <style>blockquote { margin-bottom: 0.5em; padding: 0.5em; background-color: #FFF8DC; border-left: 2px solid #A5573E; border-left-color: rgb(255, 228, 102); display: block; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 5em; margin-inline-end: 5em; } </style>
# Change the following to get wider output -- also note body style above
#+HTML_HEAD: <style>#content { max-width: 60em; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://richmit.github.io/voyager/
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|          <r> | <l>                                 |
|    *Author:* | /{{{author}}}/                      |
|   *Updated:* | /{{{modification-time(%Y-%m-%d)}}}/ |
| *Generated:* | /{{{time(%Y-%m-%d)}}}/              |
#+ATTR_HTML: :align center
Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved.

#+TOC: headlines 5

#+INCLUDE: emacs.org

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

This document contains computational recipes for the HP-15C.  Most of these items fall into one of the following categories:

 - Some tricky behavior of the 15C
 - An efficient way to preform some computation on the 15C
 - Illustrate a neat way to solve a problem -- not necessarily 15C specific

* Triangles
:PROPERTIES:
:CUSTOM_ID: triangles
:END:

** Right Triangle: Known Hypotenuse & angle
:PROPERTIES:
:CUSTOM_ID: triHypAngle
:END:

This item illustrates the different behavior of {{{c15(→R)}}} and {{{c15(→P)}}} when complex mode (flag 9 set) is enabled.

#+ATTR_HTML: :width 30% :align center
file:fig-right.png

With $b=5$ and $\alpha=30$.

*** Complex Mode
:PROPERTIES:
:CUSTOM_ID: triHypAngleC
:END:

If the calculator is in complex mode (Flag 9 set):

| {{{c15(g DEG)}}}               | Put calculator in degree mode (if necessary)                        |
| {{{c15(5 ENTER 30 f I f →R)}}} | Enter complex number $5\angle30$ (length of $b$ and $\alpha$ angle) |

$c$ is on the real stack at *=X=*, and $a$ is on the complex stack at *=X=*.

*** Real Mode
:PROPERTIES:
:CUSTOM_ID: triHypAngleR
:END:

If the calculator is not in complex mode (Flag 9 clear):

| {{{c15(g DEG)}}}           | Put calculator in degree mode (if necessary)                    |
| {{{c15(30 ENTER 5 f →R)}}} | Enter $\alpha$ and $b$ on the stack, and convert to rectangular |

$c$ is on the stack at *=X=*, and $a$ is on the stack at *=Y=*.

** Right Triangle: Known Legs (the 2D HYPOT function)
:PROPERTIES:
:CUSTOM_ID: triLegs
:END:

Like the [[#triHypAngle][previous item]], this one also illustrates the different behavior of {{{c15(→R)}}} and {{{c15(→P)}}} when complex mode (flag 9 set)
is enabled.  In addition, this item illustrates the most efficient way to compute the 2D $\mathrm{HYPOT}$ function.

The 2D $\mathrm{HYPOT}$ function is defined as $\mathrm{HYPOT}(x,y)=\sqrt{x^2+y^2}$.  The function is so named because its value is the length of the
hypotenuse of a triangle with leg lengths of $x$ & $y$.  A slight modification to the triangle solution technique below gives us a method to compute
$\mathrm{HYPOT}$ with the fewest keystrokes.  In particular, when computing $\mathrm{HYPOT}(x,y)$ we don't need to insure the calculator is in degree mode --
i.e. to compute $\mathrm{HYPOT}(x,y)$ we can skip the first step in each of the procedures below.  For how to compute the generalized $\mathrm{HYPOT}$
function, see [[#hypot][HYPOT]] below.

#+ATTR_HTML: :width 30% :align center
file:fig-345.png

With $c=4$ and $b=3$.

*** Complex Mode
:PROPERTIES:
:CUSTOM_ID: triLegsC
:END:

If the calculator is in complex mode (Flag 9 set):

| {{{c15(g DEG)}}}         | Put calculator in degree mode (if necessary) |
| {{{c15(4 ENTER 3 f I)}}} | Enter complex number $4+3i$                  |
| {{{c15(g →P)}}}          | Convert to polar form.                       |

$b$ is the real stack at *=X=*, and $\alpha$ is on the complex stack at *=X=*.

*** Real Mode
:PROPERTIES:
:CUSTOM_ID: triLegsR
:END:

If the calculator is not in complex mode (Flag 9 clear):

| {{{c15(g DEG)}}}          | Put calculator in degree mode (if necessary)       |
| {{{c15(3 ENTER 4 g →P)}}} | Enter $b$ & $c$ on the stack, and convert to polar |

$b$ is the stack at *=X=*, and $\alpha$ is on the stack at *=Y=*.

** General Triangle: SAS (Side Angle Side)
:PROPERTIES:
:CUSTOM_ID: SAS
:END:

The way the HP-15C works with complex numbers exposes the real & imaginary parts to the user for individual manipulation.  For example the HP-15C has no =Re=,
=Im=, or =conj= functions because they are simply unnecessary.  This design choice makes it simple to change the sign of the real part of a complex number on the
HP-15C with a single keystroke!  Most calculators require several keystrokes to achieve the same task. For example, on the HP-42S we might use a sequence like
=[COMPLEX] [X<>Y] [CHS] [X<>Y] [COMPLEX]= to change the sign of the real part of a complex number.

In the sequence below we change the sign of the real part of a complex number with a single keystroke (step 4 below).  We do this to transform the complex
number's argument to the supplementary angle.

#+ATTR_HTML: :width 30% :align center
file:fig-sas.png

With $b=5$, $\alpha=30$, and $c=4$.

| {{{c15(g DEG)}}}                | Put calculator in degree mode (if necessary)                                          |
| {{{c15(5 ENTER 3 0 f I f →R)}}} | Enter complex number $5\angle30$ (length of $b$ and $\alpha$ angle)                   |
| {{{c15(4 -)}}}                  | Subtract $4+0i$ (the length of $c$).  Gives side $a$ as a complex number              |
| {{{c15(CHS)}}}                  | Changing the real part sign transforms the complex angle to the supplementary angle. |
| {{{c15(→P)}}}                   | Convert to polar form.                                                                |

$a$ will be on the real stack at *=X=*, and $\beta$ will be on the complex stack at *=X=*.

* Lines
:PROPERTIES:
:CUSTOM_ID: lines
:END:

** Equation of line given two points
:PROPERTIES:
:CUSTOM_ID: linEq2
:END:

The mathematical idea behind how this works is that linear regression with only two points produces the equation of the interpolating line.

This works on any calculator that can do linear regression, but the process is particularly efficient on the 15C.  For example, the entire process on the
HP-15C requires only 7 keystrokes beyond data entry; however, on the fx-5800P (my favorite algebraic scientific calculator) it takes 18 keystrokes (=[mode]
[4] [function] [5] [1] [2] [EXE] x1 [EXE] x2 [EXE] [UP] [UP] [RIGHT] y1 [EXE] y2 [EXE] [FUNCTION] [6] [2] [1]=).

Find the equation of the line passing through $(2,3)$ and $(5,2)$ in slope-intercept form (i.e. $y=mx+b$).

| {{{c15(f CLR_Σ)}}}      | Clear statistical registers (if necessary) |
| {{{c15(3 ENTER 2 Σ+)}}} | Enter first point (note y goes in first)  |
| {{{c15(2 ENTER 5 Σ+)}}} | Enter second point                        |
| {{{c15(L.R.)}}}         | Compute the line                          |
 
The value for $m$ is in *=Y=*, and value for $b$ is in *=X=*.

** Interpolation & extrapolation (applied to Fahrenheit/Celsius Conversion)
:PROPERTIES:
:CUSTOM_ID: linInterp
:END:

This item is a continuation of the [[#linEq2][previous one]], but this time we are interested in computed values on the line instead of the equation -- i.e. we
are interested in linear interpolation!  Like in the [[#linEq2][previous topic]], this concept works with any calculator capable of linear regression;
however, the process is so cumbersome on many modern calculators that it's simply not worth the effort.  On the Casio fx-5800P it takes 18 keystrokes (see:
[[#linEq2][previous topic]]) to set up the interpolation, and 7 keystrokes ([FUNCTION] [7] [2] [DOWN] [DOWN] [DOWN] [ŷ]) to compute an interpolated value. Compare
this to 7 keystrokes to set up the line, and 2 keystrokes to compute a value on the HP-15C. This is where the HP-15C shines.

Suppose we have several Fahrenheit values we need to convert to Celsius.  We know the two values have a linear relationship, and we also remember the
corresponding values in each system for the freezing and boiling points of water.  In particular 0 Celsius corresponds to 32 degrees Fahrenheit, and 100
Celsius corresponds to 212 Fahrenheit. We wish to convert 68, 70, & 72 degrees Fahrenheit to Celsius.

| {{{c15(f CLR_Σ)}}}              | Clear statistical registers (if necessary)  |
| {{{c15(0 ENTER 32 Σ+)}}}        | Enter first known point                    |
| {{{c15(100 ENTER 212 Σ+)}}}     | Enter second known point                   |
| {{{c15(68 g ŷ\,r)}}}            | The celsius value is on the stack at *=X=* |
| {{{c15(70 g ŷ\,r)}}}            | The celsius value is on the stack at *=X=* |
| {{{c15(72 g ŷ\,r)}}}            | The celsius value is on the stack at *=X=* |

** Logarithmic Interpolation (Non-Linear Interpolation)
:PROPERTIES:
:CUSTOM_ID: logInterp
:END:

Most modern calculators can do several types of regression (at least logarithmic, exponential, power, and linear).  The HP-15C can do only one, and that's
linear regression.  Still, with a little extra effort, we can preform these other types of regressions via logarithmic transformation of the input data.
Additionally we can extend this technique to a whole host of non-linear regression techniques rarely supported by calculators.  For me the most common
non-linear regression I preform is logarithmic.

Suppose we have two points, $(x_1, y_1)$ and $(x_2, y_2)$, that we know are on a curve of the form $y=m\cdot\ln(x)+b$.  As a practical example, it might be
the case that we have two voltage/current points on a diode V-I curve and we wish to know the coefficients in the Shockley diode equation.  We can find this
equation using the method [[#linEq2][used previously]] for finding the equation of a line given two points -- we simply enter the natural logarithm of the $x$
data.

For this example, let us suppose $(x_1, y_1)=(2,3)$ and $(x_2, y_2)=(5,2)$

| {{{c15(f CLR_Σ)}}}         | Clear statistical registers (if necessary) |
| {{{c15(3 ENTER 2 LN Σ+)}}} | Enter first point (note y goes in first)  |
| {{{c15(2 ENTER 5 LN Σ+)}}} | Enter second point                        |
| {{{c15(L.R.)}}}            | Compute the coefficients                  |

The value for $m$ is in *=Y=*, and value for $b$ is in *=X=*.

This method is quite general. We can replace $\ln$ with any function, $g(x)$, so long as $g(x)$ is monotone on the interval $[x_1, x_2]$.  For example, we
could fit $y=m\cdot\sin(x)+b$ to the points $(0,1)$ & $(1.5, 2)$ -- because $\sin$ is monotone on $[0, 1.4]$.

* 2D vectors
:PROPERTIES:
:CUSTOM_ID: vec2d
:END:

** Vector Sums
:PROPERTIES:
:CUSTOM_ID: vec2dSums
:END:

The obvious approach to summing a series of 2D vectors is to use complex number arithmetic.  That approach works just fine, but we can use the HP-15C's
statistical capabilities to do the same computation with fewer keystrokes when working with more than 2 vectors.

Sum the following four vectors: $(2,3), (5,2), (7,7), (3,5)$.  In what follows we use the statistical registers in reverse because entry is less error prone.

| {{{c15(f CLR_Σ)}}}      | Clear statistical registers (if necessary) |
| {{{c15(2 ENTER 3 Σ+)}}} | Enter first vector                        |
| {{{c15(5 ENTER 2 Σ+)}}} | Enter second vector                       |
| {{{c15(7 ENTER 7 Σ+)}}} | Enter third vector                        |
| {{{c15(3 ENTER 5 Σ+)}}} | Enter fourth vector                       |
| {{{c15(RCL 3)}}}        | Sum of the $y$ components                 |
| {{{c15(RCL 5)}}}        | Sum of the $x$ components                 |
 
The sum of the $x$ components will be in *=X=*, and $y$ sum will be in *=Y=* .

** Angle between vectors
:PROPERTIES:
:CUSTOM_ID: vec2dAngles
:END:

This item is more about pointing out that we can find the angle between two vectors in 2D using complex arithmetic instead of the traditional vector angle
formula.  This works on any calculator supporting both polar & rectangular complex arithmetic.

Find the angle between the vectors $(2,3)$ and $(3,2)$.

| {{{c15(g DEG)}}}         | Put calculator in degree mode (if necessary)     |
| {{{c15(2 ENTER 3 f I)}}} | Enter complex number $2+3i$ for the first vector |
| {{{c15(3 ENTER 2 f I)}}} | Enter complex number $3+2i$ for the first vector |
| {{{c15(÷ →P)}}}          | Divide and convert to polar form                 |
 
The angle is on the complex stack at *=X=*.

* General  =HYPOT= Function
:PROPERTIES:
:CUSTOM_ID: hypot
:END:

The $\mathrm{HYPOT}(x,y)$ function may be generalized to $n\mathrm{-vectors}$ like so:

$$\mathrm{HYPOT}(\vec{x})=\sqrt{\sum_{i=1}^n x_i}$$

Note this is nothing more than the Euclidean Norm (2-norm) usually written $\left\Vert\vec{x}\right\Vert_2$ or simply $\left\Vert\vec{x}\right\Vert$.

The most efficient way to compute this function when $n=2$ is provided in a [[#triLegs][previous topic]].

When $n=3$ the best sequence is
| $x_1$ {{{c15(ENTER ×)}}} $x_2$ {{{c15(ENTER × +)}}} $x_3$  {{{c15(ENTER × + √x)}}} 

When $n>3$ the best sequence is
| {{{c15(f CLR_Σ)}}} ( $x_i$ {{{c15(f Σ+)}}} ...) {{{c15(RCL 4 √x)}}} |

* Meta Data
:PROPERTIES:
:CUSTOM_ID: meta
:END:

The primary URL for this page: https://richmit.github.io/voyager/hp15-tips.html

The org mode file for this page: https://github.com/richmit/voyager/blob/main/docs/hp15-tips.org

The HTML file for this page: https://github.com/richmit/voyager/blob/main/docs/hp15-tips.html

The github repository housing this content: https://github.com/richmit/voyager/
