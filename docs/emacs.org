* Introduction                                                     :noexport:

Note some things don't work or work strangely.  I'll fix them when I find the need:
 - The linear regression prediction buttons need the comma escaped in the macros -- I can't fix that.
 - I have no 12C programs, so that code is untested.
 - I don't have keyboard layouts for 12C variants other than the 12cp.

* Basic Formatting Macros                                          :noexport:

#+MACRO: SPC @@html:&nbsp;&nbsp;&nbsp;@@


* Code Formatting Lisp Code                                        :noexport:

#+begin_src elisp
(defun VOY-buttoner (calc code-line)
  (let ((code-toks (cl-loop for ctok in (split-string code-line)
                            for tok = (cond ((string-match-p "^\\.[0-9]$" ctok) (split-string ctok "" 't))
                                            ((string-match-p "^[0-9]+$" ctok)   (split-string ctok "" 't))
                                            ('t                                 ctok)
                                            )
                            append (if (listp tok) tok (list tok))))
        (bfs "@@html:<span style='font-family:sans-serif;margin:0;padding:.1em .4em .1em .4em;color:%s;background-color:#644117;border-radius:0.3em;'>%s</span>@@")
        (wkey (cond ((string-equal calc "15c")  '("√x"         "eˣ"       "10ˣ"      "yˣ"        "1/x"        "CHS"        "7"     "8"      "9"     "÷"
                                                  "SST"        "GTO"      "SIN"      "COS"       "TAN"        "EEX"        "4"     "5"      "6"     "×"
                                                  "R/S"        "GSB"      "R↓"       "x≷y"       "←"          "ENTER"      "1"     "2"      "3"     "-"
                                                  "ON"                               "STO"       "RCL"        "ENTER"      "0"     "."      "Σ+"    "+"      ))
                    ((string-equal calc "16c")  '("A"          "B"        "C"        "D"         "E"          "F"          "7"     "8"      "9"     "÷"      
                                                  "GSB"        "GTO"      "HEX"      "DEC"       "OCT"        "BIN"        "4"     "5"      "6"     "×"      
                                                  "R/S"        "SST"      "R↓"       "x≷y"       "BSP"        "ENTER"      "1"     "2"      "3"     "-"      
                                                  "ON"                               "STO"       "RCL"        "ENTER"      "0"     "."      "CHS"   "+"      ))
                    ((string-equal calc "12cp") '("n"          "i"        "PV"       "PMT"       "FV"         "CHS"        "7"     "8"      "9"     "÷"      
                                                  "yˣ"         "1/x"      "%T"       "Δ%"        "%"          "EEX"        "4"     "5"      "6"     "×"      
                                                  "R/S"        "SST"      "R↓"       "x≷y"       "CLx"        "ENTER"      "1"     "2"      "3"     "-"      
                                                  "ON"                               "STO"       "RCL"        "ENTER"      "0"     "."      "Σ+"    "+"      ))))
        (ykey (cond ((string-equal calc "15c")  '("A"          "B"        "C"        "D"         "E"          "MATRIX"     "FIX"   "SCI"    "ENG"   "SOLVE"  
                                                  "LBL"        "HYP"      "DIM"      "(i)"       "I"          "RESULT"     "x≷"    "DSE"    "ISG"   "∫"      
                                                  "PSE"        "CLR_Σ"    "CLR_PRGM" "CLR_REG"   "CLR_PREFIX" "RAN#"       "→R"    "→H.MS"  "→RAD"  "Re≷Im"  
                                                               "f"                   "FRAC"      "USER"       "RAN#"       "x!"    "ŷ,r"    "L.R."  "Py,x"   ))
                    ((string-equal calc "16c")  '("SL"         "SR"       "RL"       "RR"        "RLn"        "RRn"        "MASKL" "MASKR"  "RMD"   "XOR"    
                                                  "x≷(i)"      "x≷I"      "SHO_HEX"  "SHO_DEC"   "SHO_OCT"    "SHO_BIN"    "SB"    "CB"     "B?"    "AND"    
                                                  "(i)"        "I"        "CLR_PRGM" "CLR_REG"   "CLR_PREFIX" "WINDOW"     "1'S"   "2'S"    "UNSGN" "NOT"    
                                                               "f"                   "WSIZE"     "FLOAT"      "WINDOW"     "MEM"   "STATUS" "EEX"   "OR"     ))
                    ((string-equal calc "12cp") '("AMORT"      "INT"      "NPV"      "RND"       "IRR"        "RPN"        "FIX_7" "FIX_8"  "FIX_9"          
                                                  "BOND_PRICE" "BOND_YTM" "DEPR_SL"  "DEPR_SOYD" "DEPR_DB"    "ALG"        "FIX_4" "FIX_5"  "FIX_6"          
                                                  "P/R"        "CLR_Σ"    "CLR_PRGM" "CLR_FIN"   "CLR_REG"    "CLR_PREFIX" "FIX_1" "FIX_2"  "FIX_3"          
                                                  "OFF"        "f"                                            "CLR_PREFIX" "FIX_0"                           ))))
        (bkey (cond ((string-equal calc "15c")  '("x²"         "LN"       "LOG"      "%"         "Δ%"         "ABS"        "DEG"   "RAD"    "GRAD"  "x≤y"    
                                                  "BST"        "AHYP"     "ASIN"     "ACOS"      "ATAN"       "π"          "SF"    "CF"     "F?"    "x=0"    
                                                  "R/S"        "RTN"      "R↑"       "RNS"       "CLx"        "LSTx"       "→P"    "→H"     "→DEG"  "TEST"   
                                                                          "g"        "INT"       "MEM"        "LSTx"       "x̄"     "s"      "Σ-"    "Cy,x"   ))
                    ((string-equal calc "16c")  '("LJ"         "ASR"      "RLC"      "RRC"       "RLCn"       "RRCn"       "#B"    "ABS"    "DBLR"  "DBLR÷"  
                                                  "RTN"        "LBL"      "DSZ"      "ISZ"       "√x"         "1/x"        "SF"    "CF"     "F?"    "DBLR×"  
                                                  "P/R"        "BST"      "R↑"       "PSE"       "CLx"        "LSTx"       "x≤y"   "x<0"    "x>y"   "x>0"    
                                                                          "g"        "◄"         "►"          "LSTx"       "x≠y"   "x≠0"    "x=y"   "x=0"    ))
                    ((string-equal calc "12cp") '("12×"        "12÷"      "CFo"      "Cfj"       "Nj"         "DATE"       "BEG"   "END"    "MEM"   "↶"      
                                                  "√x"         "eˣ"       "LN"       "FRAC"      "INTG"       "ΔDAYS"      "D.MY"  "M.DY"   "x̄w"    "x²"     
                                                  "PSE"        "BST"      "GTO"      "x≤y"       "x=0"        "="          "x̂̂,r"   "ŷ,r"    "n!"    "←"      
                                                                          "g"        "("         ")"          "="          "x̄"     "s"      "Σ-"    "LSTx"   )))))
    (string-join (mapcar (lambda (x)
                           (let* ((wpos (cl-position x wkey :test #'string-equal))
                                  (ypos (cl-position x ykey :test #'string-equal))
                                  (bpos (cl-position x bkey :test #'string-equal))
                                  (colr (if wpos "white" (if ypos "yellow" (if bpos "cyan" (error "Unknown token(%s): %s" x code-line))))))
                             (format bfs colr x)))
                         code-toks)
                 " ")))
(defun VOY-labeler (label)
  (format "@@html:<span style='font-family:monospace;margin-top:0;margin-bottom:0;margin-left:auto;margin-right:auto;display:inline-block;width:2em;text-align:center;padding-top:0px;padding-bottom:0px;color:yellow;background-color:#644117;border-radius:0.3em;'>%s</span>@@" label))
#+end_src

#+RESULTS:
#+begin_example
VOY-labeler
#+end_example


* Code Formatting Macros                                           :noexport:

#+MACRO: c15 (eval (VOY-buttoner "15c" $1))
#+MACRO: c16 (eval (VOY-buttoner "16c" $1))
#+MACRO: c12 (eval (VOY-buttoner "12cp" $1))

#+MACRO: lbl (eval (VOY-labeler $1))
#+MACRO: reg (eval (VOY-labeler $1))
#+MACRO: flg (eval (VOY-labeler $1))
#+MACRO: mat (eval (VOY-labeler $1))

#+MACRO: stk *=$1=*

* Formatting Tests                                                 :noexport:

| 15c  | {{{c15(LBL B)}}}   |
| 15c  | {{{c15(GSB B)}}}   |
| 15c  | {{{c15(GSB B)}}}   |
| 16c  | {{{c16(g LBL B)}}} |
| 16c  | {{{c16(GSB B)}}}   |
| 16c  | {{{c16(STO (i))}}} |
| 12cp | {{{c12(g BEG)}}}   |
| 12cp | {{{c12(STO 1)}}}   |

| LBL    | abc {{{lbl(1)}}} bcd    |
| LBL    | abc {{{lbl(A)}}} bcd    |
| LBL    | abc {{{lbl(.1)}}} bcd   |

* Meta Data                                                        :noexport:

The primary URL for this page: N/A

The org mode file for this page: https://github.com/richmit/voyager/blob/main/docs/emacs.org

The HTML file for this page: N/A

The github repository housing this content: https://github.com/richmit/voyager/
